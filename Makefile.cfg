#********************
# Include
#***************
# include dirs
PROJECT_INCLUDE_DIR := $(TARGET)
PROJECT_INCLUDE_DIR_API := include

#********************
# DEFAULT
#***************
PROJECT_DESCRIPTION := HTML Renderer

PROJECT_TARGET := source

# flags
PROJECT_OPTIMIZATION_LEVEL ?= -O2
PROJECT_SPEC_VERSION ?= c99

PROJECT_CFLAGS ?= -Wall -Werror -pipe -Wno-unused-function
PROJECT_LFLAGS ?=
PROJECT_CFLAGS += -I$(PROJECT_INCLUDE_DIR)

OS ?= $(shell uname -s)
prefix ?= /usr/local
exec_prefix ?= $(prefix)

PROJECT_CLONE_SED_HEADER_COMMAND = find $(PROJECT_INCLUDE_DIR_API) -name "*.h" \
    -exec $(SED) -i.bak -e 's,\s*\#\s*include\s*"\([^"]*\)",\#include <\1>,g' {} \; | 2>&1

#********************
# Version
#***************
PROJECT_VERSION_MAJOR := 0
PROJECT_VERSION_MINOR := 1
PROJECT_VERSION_PATCH := 0

PROJECT_VERSION_STRING := $(PROJECT_VERSION_MAJOR).$(PROJECT_VERSION_MINOR).$(PROJECT_VERSION_PATCH)

#********************
# Libraries
#***************
# lib name
LIB_NAME := lexbor
LIB_NAME_SUFFIX := .so
LIB_NAME_SUFFIX_STATIC := _static.a

# lib dirs
LIB_DIR_BASE := lib

PROJECT_LIBRARY_NAME ?= lib$(LIB_NAME)$(LIB_NAME_SUFFIX)
PROJECT_LIBRARY_NAME_STATIC ?=lib$(LIB_NAME)$(LIB_NAME_SUFFIX_STATIC)
PROJECT_LIBRARY_NAME_WITH_VERSION = lib$(LIB_NAME)-$(PROJECT_VERSION_STRING)$(LIB_NAME_SUFFIX)

PROJECT_LIBRARY ?= $(LIB_DIR_BASE)/$(PROJECT_LIBRARY_NAME)
PROJECT_LIBRARY_STATIC ?= $(LIB_DIR_BASE)/$(PROJECT_LIBRARY_NAME_STATIC)
PROJECT_LIBRARY_WITH_VERSION = $(LIB_DIR_BASE)/$(PROJECT_LIBRARY_NAME_WITH_VERSION)

PROJECT_LIBRARY_WITH_VERSION_MAJOR = $(LIB_DIR_BASE)/lib$(LIB_NAME)-$(PROJECT_VERSION_MAJOR)$(LIB_NAME_SUFFIX)
PROJECT_LIBRARY_WITH_VERSION_MAJOR_MINOR = $(LIB_DIR_BASE)/lib$(LIB_NAME)-$(PROJECT_VERSION_MAJOR).$(PROJECT_VERSION_MINOR)$(LIB_NAME_SUFFIX)

#********************
# Binaries
#***************
# binaries dirs
BINARY_DIR_BASE := bin

#********************
# Build
#***************
PROJECT_SOURCE ?= $(SRCDIR)
PROJECT_BUILD_SHARED_AFTER :=
PROJECT_BUILD_STATIC_AFTER :=

PROJECT_BUILD_CLEAN_AFTER :=

