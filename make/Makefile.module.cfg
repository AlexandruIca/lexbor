PROJECT_MODULES_VAR := PROJECT_MODULES

#********************
# Modules
#***************
#********************
# project_utils_modules_append(<DIR PATH>)
#
# PROJECT_MODULES :=
# PROJECT_MODULES_RULES :=
# PROJECT_MODULE_<NAME>_DIR :=
# PROJECT_MODULE_<NAME>_MAKE :=
# PROJECT_MODULE_<NAME>_RULES :=
# PROJECT_MODULE_<NAME>_SOURCES :=
# PROJECT_MODULE_<NAME>_OBJECTS :=
#
project_utils_modules_append = \
$(eval _PNMTMP := $(if $(strip $3),$3,${PROJECT_MODULES_VAR})) \
$(if $(filter $2,${${_PNMTMP}}),$(error The "$2" module is already present in "$(PROJECT_MODULE_$2_DIR)" directory),)\
$(if $(call project_utils_exists,$1$(PROJECT_CONF_DIR_SEPARATOR)$(PROJECT_CONF_MODULE_MAKEFILE)),\
  $(eval $(_PNMTMP) += $2)\
  $(eval PROJECT_MODULE_$2_DIR := $1)\
  $(eval PROJECT_MODULE_$2_MAKE := $(strip $(PROJECT_MODULE_$2_DIR)$(PROJECT_CONF_DIR_SEPARATOR)$(PROJECT_CONF_MODULE_MAKEFILE)))\
  $(eval PROJECT_MODULE_$2_RULES := $(strip \
    $(if $(call project_utils_exists,$1$(PROJECT_CONF_DIR_SEPARATOR)$(PROJECT_CONF_MODULE_RULES)),\
      $(PROJECT_MODULE_$2_DIR)$(PROJECT_CONF_DIR_SEPARATOR)$(PROJECT_CONF_MODULE_RULES),)\
    ))\
  $(eval PROJECT_MODULE_$2_HEADERS := $(call project_utils_headers,$(PROJECT_MODULE_$2_DIR)))\
  $(eval PROJECT_MODULE_$2_SOURCES := $(call project_utils_sources,$(PROJECT_MODULE_$2_DIR)))\
  $(eval PROJECT_MODULE_$2_OBJECTS := $(call project_utils_objects,$(PROJECT_MODULE_$2_DIR)))\
  $(eval PROJECT_MODULE_$2_EXECUTE := $(call project_utils_execute,$(PROJECT_MODULE_$2_DIR)))\
  $(eval PROJECT_MODULE_$2_TARGET_ALL := module_target_$2_all)\
  $(eval PROJECT_MODULE_$2_TARGET_CLEAN := module_target_$2_clean)\
  $(eval PROJECT_MODULE_$2_TARGET_CLONE := module_target_$2_clone)\
  $(if $(strip $(PROJECT_MODULE_$2_RULES)),\
    $(if $(filter $(PROJECT_MODULE_$2_RULES),$($(_PNMTMP)_RULES)),,\
      $(eval $(_PNMTMP)_RULES += $(PROJECT_MODULE_$2_RULES))\
      $(eval include $(PROJECT_MODULE_$2_RULES)),\
    )\
  )\
,\
  $(if $(call project_utils_exists,$1$(PROJECT_CONF_DIR_SEPARATOR)$(PROJECT_CONF_MODULE_RULES)),\
    $(if $(filter $(strip $1$(PROJECT_CONF_DIR_SEPARATOR)$(PROJECT_CONF_MODULE_RULES)),$($(_PNMTMP)_RULES)),,\
      $(eval $(_PNMTMP)_RULES += $1$(PROJECT_CONF_DIR_SEPARATOR)$(PROJECT_CONF_MODULE_RULES))\
      $(eval include $1$(PROJECT_CONF_DIR_SEPARATOR)$(PROJECT_CONF_MODULE_RULES))\
    )\
  ,\
    $(error The "$2" module have not present $(PROJECT_CONF_MODULE_MAKEFILE) or $(PROJECT_CONF_MODULE_RULES) file in "$1" directory)\
  )\
)

#********************
# project_utils_modules_load_rules(<DIR PATH>)
#
project_utils_modules_load_rules = \
  $(if $(call project_utils_exists,$(strip $(1))$(PROJECT_CONF_DIR_SEPARATOR)$(PROJECT_CONF_MODULE_RULES)),\
    $(eval PROJECT_MODULES_RULES += $(strip $(1))$(PROJECT_CONF_DIR_SEPARATOR)$(PROJECT_CONF_MODULE_RULES))\
    $(eval include $(strip $(1))$(PROJECT_CONF_DIR_SEPARATOR)$(PROJECT_CONF_MODULE_RULES))\
  ,)

#********************
# project_utils_modules_load_rules_from_dir(<DIR PATH>)
#
project_utils_modules_load_rules_from_dir = $(foreach module,$(strip $(call project_utils_dir_list,$(strip $(1)))),$(call project_utils_modules_load_rules,$(strip $(1))$(PROJECT_CONF_DIR_SEPARATOR)$(module)))

#********************
# project_utils_modules([<VAR>])
#
project_utils_modules = $(strip $(if $(strip $1),$($1),$(PROJECT_MODULES)))

#********************
# project_utils_modules_make([<VAR>])
#
project_utils_modules_make = $(strip $(foreach module,$(call project_utils_modules,$1),$(PROJECT_MODULE_$(module)_MAKE)))

#********************
# project_utils_modules_rules([<VAR>])
#
project_utils_modules_rules = $(strip $(if $(strip $1),$($1_RULES),$(PROJECT_MODULES_RULES)))

#********************
# project_utils_modules_target_sources([<VAR>])
#
project_utils_modules_target_sources = $(strip $(foreach module,$(call project_utils_modules,$1),PROJECT_MODULE_$(module)_SOURCES))

#********************
# project_utils_modules_target_objects([<VAR>])
#
project_utils_modules_target_objects = $(strip $(foreach module,$(call project_utils_modules,$1),PROJECT_MODULE_$(module)_OBJECTS))

#********************
# project_utils_modules_target_execute([<VAR>])
#
project_utils_modules_target_execute = $(strip $(foreach module,$(call project_utils_modules,$1),PROJECT_MODULE_$(module)_EXECUTE))

#********************
# project_utils_modules_target_all([<VAR>])
#
project_utils_modules_target_all = $(strip $(foreach module,$(call project_utils_modules,$1),$(PROJECT_MODULE_$(module)_TARGET_ALL)))

#********************
# project_utils_modules_target_clean([<VAR>])
#
project_utils_modules_target_clean = $(strip $(foreach module,$(call project_utils_modules,$1),$(PROJECT_MODULE_$(module)_TARGET_CLEAN)))

#********************
# project_utils_modules_make([<VAR>])
#
project_utils_modules_make = $(strip $(foreach module,$(call project_utils_modules,$1),$(PROJECT_MODULE_$(module)_MAKE)))

#********************
# project_utils_module_info([<VAR>])
#
project_utils_modules_info = $(foreach module,$(sort $(call project_utils_modules,$1)),$(PROJECT_UTILS_NEWLINE)Module: $(module)\
$(PROJECT_UTILS_NEWLINE)Description: $(call project_utils_module_info_description,$(module))\
$(PROJECT_UTILS_NEWLINE)Dependencies: $(call project_utils_module_info_dependencies,$(module))$(PROJECT_UTILS_NEWLINE))

#********************
# project_utils_module_headers_clone(<NAME>[, <DIR CUT PREFIX>])
#
project_utils_module_headers_clone = $(foreach fn,$(PROJECT_MODULE_$1_HEADERS),echo $(fn) \
$(PROJECT_INCLUDE_DIR_API)$(PROJECT_CONF_DIR_SEPARATOR)$(PROJECT_MODULE_$1_DIR:$2%=%)$(PROJECT_CONF_DIR_SEPARATOR)$(notdir $(fn))$(PROJECT_UTILS_NEWLINE))

#********************
# project_utils_module_headers_clone_dir(<NAME>[, <DIR CUT PREFIX>])
#
project_utils_module_headers_clone_dir = $(MKDIR) -p $(PROJECT_INCLUDE_DIR_API)$(PROJECT_CONF_DIR_SEPARATOR)$(PROJECT_MODULE_$1_DIR:$2%=%)$(PROJECT_CONF_DIR_SEPARATOR)$(PROJECT_UTILS_NEWLINE)

#********************
# project_utils_modules_headers_clone([<DIR CUT PREFIX>, <VAR>])
#
project_utils_modules_headers_clone = $(foreach module,$(call project_utils_modules,$2),\
$(if $(strip $(module_$(module)_install_headers)),\
$(call project_utils_module_headers_clone_dir,$(module),$1)$(call project_utils_module_headers_clone,$(module),$1),))

#********************
# project_utils_module_info_description(<NAME>)
#
project_utils_module_info_description = $(strip $(module_$(strip $1)_info_description))

#********************
# project_utils_module_info_dependencies(<NAME>)
#
project_utils_module_info_dependencies = $(strip $(module_$(strip $1)_info_dependencies))

#********************
# project_utils_module_load(<DIR PATH TO MODULE>, <NAME>[, <VAR>])
#
project_utils_module_load = $(call project_utils_modules_append,$1,$2,$3)

#********************
# project_utils_module_dir(<NAME>)
#
project_utils_module_dir = $(strip $(PROJECT_MODULE_$1_DIR))

#********************
# project_utils_modules_load_from_dir(<DIR PATH>[, <VAR>])
#
project_utils_modules_load_from_dir = $(foreach module,$(strip $(call project_utils_dir_list,$1)),$(call project_utils_modules_append,$1$(PROJECT_CONF_DIR_SEPARATOR)$(module),$(module),$2))

#********************
# project_utils_modules_load_from_dir_without(<DIR PATH>, <WITHOUT>[, <VAR>])
#
project_utils_modules_load_from_dir_without = $(foreach module,$(strip $(call project_utils_dir_list_without,$1,$2)),$(call project_utils_modules_append,$1$(PROJECT_CONF_DIR_SEPARATOR)$(module),$(module),$3))

#********************
# project_utils_module_args_by_idx(<NAME>, <INDEX>, <FULL PATH>)
#
project_utils_module_args_by_idx = $(strip $(module_target_$1_$(strip $(subst $(PROJECT_CONF_DIR_SEPARATOR),_,$(3:$(PROJECT_MODULE_$1_DIR)$(PROJECT_CONF_DIR_SEPARATOR)%=%)))_args_$2))

#********************
# project_utils_module_args(<NAME>, <BEGIN INDEX>, <FULL PATH>)
#
project_utils_module_args = \
$(eval _MARGBITMP := $(call project_utils_module_args_by_idx,$1,$2,$3))$(PROJECT_UTILS_NEWLINE)$(if $(strip $(_MARGBITMP)),$3 \
$(_MARGBITMP)$(call project_utils_module_args,$1,$(call PROJECT_UTILS_INC,$2),$3),$(if $(filter $2,1),$3,))

#********************
# project_utils_module_executes_with_args(<NAME>)
#
project_utils_module_executes_with_args = $(foreach fn,$(PROJECT_MODULE_$1_EXECUTE),$(call project_utils_module_args,$1,1,$(fn)))

#********************
# project_utils_modules_executes_with_args([<VAR>])
#
project_utils_modules_executes_with_args = $(eval _PNMTMP := $(if $(strip $1),$1,${PROJECT_MODULES_VAR})) \
$(foreach module,$($(_PNMTMP)),$(call project_utils_module_executes_with_args,$(module)))
