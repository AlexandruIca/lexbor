
#********************
# Utils
#***************
PROJECT_UTILS_SPACE :=
PROJECT_UTILS_SPACE +=

define PROJECT_UTILS_NEWLINE


endef

project_utils_upcase = $(subst a,A,$(subst b,B,$(subst c,C,$(subst d,D,$(subst e,E,$(subst f,F,$(subst g,G,$(subst h,H,$(subst i,I,$(subst j,J,$(subst k,K,$(subst l,L,$(subst m,M,$(subst n,N,$(subst o,O,$(subst p,P,$(subst q,Q,$(subst r,R,$(subst s,S,$(subst t,T,$(subst u,U,$(subst v,V,$(subst w,W,$(subst x,X,$(subst y,Y,$(subst z,Z,$1))))))))))))))))))))))))))

#********************
# Arithmetic
#***************
PROJECT_UTILS_NT_EQ = $(if $(strip $(filter $1,$2)),$(true),$(false))

PROJECT_UTILS_LUT := 2 3 4 5 6 7 8 9 0
PROJECT_UTILS_NUMBERS := 0 1 2 3 4 5 6 7 8 9
PROJECT_UTILS_SPLIT = $(strip $(if $(1),$(foreach d,$(PROJECT_UTILS_NUMBERS),$(if $(1:$(d)%=),,$(d) $(call PROJECT_UTILS_SPLIT,$(1:$(d)%=%))))))

PROJECT_UTILS_INC = $(if $(call PROJECT_UTILS_NT_EQ,$1,0),1,$(word $1,$(PROJECT_UTILS_LUT)))

#********************
# Directories
#***************

#********************
# project_utils_wildcard(<DIR PATH>, <PATTERN>)
#	recursive wildcard
#	Example:
#		$(call project_utils_wildcard, lala/bebe/mumu, *.c)
#		return: lala/bebe/mumu/hehe/name.c
#
project_utils_wildcard = $(foreach name,$(wildcard $(1)*),$(strip $(call project_utils_wildcard,$(name)/,$(2))$(filter $(subst *,%,$(2)),$(name))))

#********************
# project_utils_dir_last(<DIR PATH>)
#	return max deep dir name
#	Example:
#		$(call project_utils_dir_last, lala/bebe/mumu)
#		return: mumu
#
project_utils_dir_last = $(lastword $(subst $(PROJECT_CONF_DIR_SEPARATOR), ,$(strip $(1))))

#********************
# project_utils_join(<JOIN VAL>, <LIST>)
#	join list by val
#	Example:
#		$(call project_utils_join,/,la be mu)
#		return: la/be/mu
#
project_utils_join = $(subst $(PROJECT_UTILS_SPACE),$(1),$(strip $(2)))

#********************
# project_utils_dir_join(<LIST>)
#	Example:
#		$(call project_utils_join,la be mu)
#		return: la/be/mu
#
project_utils_dir_join = $(call project_utils_join,$(PROJECT_CONF_DIR_SEPARATOR),$1)

#********************
# project_utils_exists(<DIR OR FILE NAME>)
#	check for exists dir or file
#
project_utils_exists = $(strip $(if $(strip $(wildcard $(1))),$(1),))

#********************
# project_utils_exists_return(<DIR OR FILE NAME>, <RETURN IF TRUE>, <RETURN IF FALSE>)
#	check for exists dir or file
#
project_utils_exists_return = $(if $(strip $(wildcard $(1))),$(2),$(3))

#********************
# project_utils_merger(<DIR PATH>, <DIR PATH>)
#	merger two dir path
#	Example:
#		$(call project_utils_merger, lala/bebe/mumu, ohoh)
#		return: lala/bebe/mumu/ohoh
#
project_utils_merger = $(if $(strip $(2)),$(strip $(2))$(PROJECT_CONF_DIR_SEPARATOR)$(call project_utils_join,$(PROJECT_CONF_DIR_SEPARATOR),$(strip $(1))),$(call project_utils_join,$(PROJECT_CONF_DIR_SEPARATOR),$(strip $(1))))

#********************
# project_utils_dir_list(<DIR PATH> [,<PREFIX WITH DIR SEPARATOR>])
#	return subdirectoies in <DIR PATH> without <DIR PATH> prefix
#	Example:
#		$(call project_utils_dir_list, lala/bebe/mumu/)
#		return: sub1 sub2 sub3
#	Example:
#		$(call project_utils_dir_list, lala/bebe/mumu/, some_prefix)
#		return: some_prefix/sub1 some_prefix/sub2 some_prefix/sub3
#
project_utils_dir_list = $(foreach xdir,$(dir $(foreach fn,$(wildcard $(strip $(1))$(PROJECT_CONF_DIR_SEPARATOR)*$(PROJECT_CONF_DIR_SEPARATOR)),$(if $(wildcard ${fn}$(PROJECT_CONF_DIR_SEPARATOR)*),${fn},))),$(call project_utils_merger,$(call project_utils_dir_last,$(xdir)),$(2)))

#********************
# project_utils_dir_list_without(<DIR PATH>, <WITHOUT SUBDIR NAME> [,<PREFIX WITH DIR SEPARATOR>])
#	return subdirectoies in <DIR PATH> without <WITHOUT SUBDIR NAME>
#	Example:
#		$(call project_utils_dir_list_without, lala/bebe/mumu/, sub2)
#		return: sub1 sub3
#
project_utils_dir_list_without = $(foreach bdir,$(filter-out $(2),$(strip $(foreach xdir,$(call project_utils_dir_list,$(1)),$(xdir)))),$(call project_utils_merger,$(bdir),$(3)))

#********************
# project_utils_dir_append_sub_to(<DIR PATH>, <SUB DIR NAME>, <NAME TO APPEND SUB> [,<PREFIX WITH DIR SEPARATOR>])
#	append sub dir <NAME TO APPEND SUB> to exists sub directory <SUB DIR NAME> in <DIR PATH>
#	Example:
#		$(call project_utils_dir_append_sub_to, lala/bebe/mumu/, sub2, best)
#		return: sub1 sub2/best sub3
#
project_utils_dir_append_sub_to = $(foreach xdir,$(patsubst $(strip $(2)),$(strip $(2))$(PROJECT_CONF_DIR_SEPARATOR)$(strip $(3)),$(call project_utils_dir_list,$(1))),$(call project_utils_merger,$(xdir),$(4)))

#********************
# project_utils_dir_makefile(<LIST OF DIRS>)
#	make path to $(PROJECT_CONF_MODULE_MAKEFILE) (delault Makefile.mk)
#	Example:
#		$(call project_utils_dir_makefile, source/core source/html)
#		return: source/core/Makefile.mk source/html/Makefile.mk
#
project_utils_dir_makefile = $(foreach xdir,$(1),$(call project_utils_merger,$(PROJECT_CONF_MODULE_MAKEFILE),$(xdir)))

#********************
# Utils
#***************

#********************
# project_utils_headers(<LIST OF DIRS>)
#	recursive get all *.h files
#	Example:
#		$(call project_utils_headers, source/core source/html)
#		return: source/core/utils/name.c source/html/be.c
#
project_utils_headers = $(foreach xdir,$1,$(foreach form_name,$(PROJECT_CONF_HEADER_FORMAT_LIST),$(call project_utils_wildcard,$(xdir),*.$(strip $(form_name)))))

#********************
# project_utils_sources(<LIST OF DIRS>)
#	recursive get all *.c files
#	Example:
#		$(call project_utils_sources, source/core source/html)
#		return: source/core/utils/name.c source/html/be.c
#
project_utils_sources = $(foreach xdir,$1,$(foreach form_name,$(PROJECT_CONF_SOURCE_FORMAT_LIST),$(call project_utils_wildcard,$(xdir),*.$(strip $(form_name)))))

#********************
# project_utils_objects(<LIST OF DIRS>)
#	recursive get all *.o files
#	Example:
#		$(call project_utils_objects, source/core source/html)
#		return: source/core/utils/name.o source/html/be.o
#
project_utils_objects = $(foreach name,$(PROJECT_CONF_SOURCE_FORMAT_LIST),$(patsubst %.$(name),%.$(PROJECT_CONF_OBJECT_FORMAT),$(call project_utils_sources, $1)))

#********************
# project_utils_execute(<LIST OF DIRS>)
#	recursive get all execute files
#	Example:
#		$(call project_utils_execute, source/core source/html)
#		return: source/core/utils/name source/html/be
#
project_utils_execute = $(foreach name,$(PROJECT_CONF_SOURCE_FORMAT_LIST),$(patsubst %.$(name),%$(PROJECT_CONF_BIN_SUFFIX),$(call project_utils_sources, $1)))

#********************
# project_utils_objects_to_bin(<LIST OF OBJ>)
#	convert object name to bin
#
project_utils_objects_to_bin = $(foreach name,$1,$(patsubst %.$(PROJECT_CONF_OBJECT_FORMAT),%$(PROJECT_CONF_BIN_SUFFIX),$(name)))

#********************
# PKG-CONFIG
#***************
PROJECT_PKG_CONFIG_FILE := $(LIB_NAME).pc
PROJECT_PKG_CONFIG_FILE_IN := $(PROJECT_CONF_DIR_MAKE)$(PROJECT_CONF_DIR_SEPARATOR)$(LIB_NAME).pc.in
PROJECT_PKG_CONFIG_CFLAGS := $(foreach name,$(PROJECT_BUILD_MODULES_LIST_WITHOUT_PORT),-I$\{includedir}/$(name))
PROJECT_PKG_CONFIG_PROCESS = \
$(SED) \
-e 's,@version\@,$(PROJECT_VERSION_STRING),g' \
-e 's,@prefix\@,$(prefix),g' \
-e 's,@exec_prefix\@,$(exec_prefix),g' \
-e 's,@libdir\@,$(PROJECT_INSTALL_LIBRARY),g' \
-e 's,@includedir\@,$(PROJECT_INSTALL_HEADER),g' \
-e 's,@cflags\@,$(PROJECT_PKG_CONFIG_CFLAGS),g' \
-e 's,@libname\@,$(LIB_NAME),g' \
-e 's,@description\@,$(PROJECT_DESCRIPTION),g' \
$1 > $2
